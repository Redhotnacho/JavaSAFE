/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package duoc.cl.safe.presentacion.evaluaciones;

import duoc.cl.safe.entity.SsfEvaluaciontipo;
import duoc.cl.safe.entity.SsfParametro;
import duoc.cl.safe.herramientas.FormsController;
import duoc.cl.safe.negocio.SsfEvaluaciontipoBO;
import duoc.cl.safe.negocio.SsfParametroBO;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Logger;
import org.apache.log4j.Level;

import org.apache.log4j.PropertyConfigurator;

/**
 *
 * @author Nacho
 */
public class MantenedorParametro extends javax.swing.JFrame {

    /**
     * Creates new form MantenedorParámetro
     */
    public MantenedorParametro() {
        initComponents();
        PropertyConfigurator.configure("log4j.properties");
        resizeTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taDescripcion = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblParametro = new javax.swing.JTable();
        lExito = new javax.swing.JLabel();
        lError = new javax.swing.JLabel();
        tbEstado = new javax.swing.JToggleButton();
        bModificar = new javax.swing.JButton();
        bAgregar = new javax.swing.JButton();
        bLimpiar = new javax.swing.JButton();
        cbTipoEval = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taParametro = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 526));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Parámetro:");

        jLabel2.setText("Descripción:");

        jScrollPane1.setAutoscrolls(true);

        taDescripcion.setColumns(20);
        taDescripcion.setLineWrap(true);
        taDescripcion.setRows(5);
        taDescripcion.setWrapStyleWord(true);
        jScrollPane1.setViewportView(taDescripcion);

        tblParametro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Parámetro", "Descripción", "Tipo evaluación", "Fecha Creación", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Short.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblParametro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblParametroMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblParametro);

        lExito.setForeground(new java.awt.Color(0, 102, 0));

        lError.setForeground(new java.awt.Color(204, 0, 0));

        tbEstado.setText("Activo");
        tbEstado.setEnabled(false);
        tbEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbEstadoActionPerformed(evt);
            }
        });

        bModificar.setText("Modificar");
        bModificar.setEnabled(false);
        bModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModificarActionPerformed(evt);
            }
        });

        bAgregar.setText("Agregar");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        bLimpiar.setText("Limpiar");
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        cbTipoEval.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Tipo Evaluación -" }));

        jLabel3.setText("Tipo Evaluación:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 0, 102));
        jLabel8.setText("Mantenedor Parámetro");

        taParametro.setColumns(20);
        taParametro.setLineWrap(true);
        taParametro.setRows(5);
        taParametro.setWrapStyleWord(true);
        taParametro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                taParametroMousePressed(evt);
            }
        });
        jScrollPane3.setViewportView(taParametro);

        jMenu1.setText("Cargando...");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbTipoEval, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
                            .addComponent(lExito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 43, Short.MAX_VALUE)
                                .addComponent(bAgregar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bModificar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bLimpiar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(lError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(bAgregar)
                            .addComponent(bLimpiar)
                            .addComponent(bModificar)
                            .addComponent(tbEstado)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cbTipoEval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lExito, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lError, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setJMenuBar(formsController.getMenu().getMenuBar());
        formsController.getMenu().setjFrame(this);
        this.setLocationRelativeTo(null);
        cargaTabla();
        cargaEvaluacionTipo();
    }//GEN-LAST:event_formWindowOpened

    private void tblParametroMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblParametroMouseClicked
        limpiarMsgs();
        tbEstado.setEnabled(true);
        bModificar.setEnabled(true);
        DefaultTableModel model = (DefaultTableModel) tblParametro.getModel();
        if (Integer.parseInt(model.getValueAt(tblParametro.getSelectedRow(), 5).toString()) == 1) {
            tbEstado.setSelected(false);
            activarEstado();
        } else {
            tbEstado.setSelected(true);
            desactivarEstado();
        }
        if (model.getValueAt(tblParametro.getSelectedRow(), 1) != null) {
            taParametro.setText(model.getValueAt(tblParametro.getSelectedRow(), 1).toString());
        } else {
            taParametro.setText("");
        }
        if (model.getValueAt(tblParametro.getSelectedRow(), 2) != null) {
            taDescripcion.setText(model.getValueAt(tblParametro.getSelectedRow(), 2).toString());
        } else {
            taDescripcion.setText("");
        }
        if (model.getValueAt(tblParametro.getSelectedRow(), 3) != null) {
            cbTipoEval.setSelectedItem(model.getValueAt(tblParametro.getSelectedRow(), 3).toString());
        } else {
            cbTipoEval.setSelectedIndex(0);
        }
    }//GEN-LAST:event_tblParametroMouseClicked

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        tbEstado.setEnabled(false);
        bModificar.setEnabled(false);
        limpiarMsgs();
        tblParametro.clearSelection();
        taParametro.setText("");
        taDescripcion.setText("");
        cbTipoEval.setSelectedIndex(0);
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void tbEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbEstadoActionPerformed
        limpiarMsgs();
        DefaultTableModel model = (DefaultTableModel) tblParametro.getModel();
        pmbo = new SsfParametroBO();

        if (tblParametro.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblParametro.getRowCount() == 0) {
                lError.setText("Tabla vacía");
                Logger.getLogger(MantenedorParametro.class.getName()).log(Level.WARN, "Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
                Logger.getLogger(MantenedorParametro.class.getName()).log(Level.WARN, "No hay fila seleccionada");
            }
        } else {
            int id = Short.parseShort(model.getValueAt(tblParametro.getSelectedRow(), 0).toString());
            if (!tbEstado.isSelected()) {
                if (pmbo.activarSP(id)) {
                    activarEstado();
                    model.setValueAt("1", tblParametro.getSelectedRow(), 5);
                }
            } else {
                if (pmbo.desactivarSP(id)) {
                    desactivarEstado();
                    model.setValueAt("0", tblParametro.getSelectedRow(), 5);
                }
            }
        }
    }//GEN-LAST:event_tbEstadoActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        pmbo = new SsfParametroBO();
        limpiarMsgs();
        if (taParametro.getText().trim().equals("")) {
            lError.setText("Ingrese un nombre para el Parámetro");
        } else if (cbTipoEval.getSelectedIndex() == 0) {
            lError.setText("Seleccione un tipo evaluación");
        } else {
            String nom, desc, idtipoeval;
            nom = taParametro.getText();
            desc = taDescripcion.getText();
            idtipoeval = mapte.get(cbTipoEval.getSelectedItem()).toString();
            SsfParametro pm = new SsfParametro();
            pm.setParametro(nom);
            pm.setDescripcion(desc);
            pm.setIdEvaluaciontipo(new SsfEvaluaciontipo(BigDecimal.valueOf((long) Long.valueOf(idtipoeval))));
            if (pmbo.addSP(pm)) {
                if (!lExito.getText().isEmpty()) {
                    contador++;
                    lExito.setText("Parámetro agregado exitosamente. ("+contador+")");
                }else{
                    contador=0;
                    lExito.setText("Parámetro agregado exitosamente.");
                }
                cargaTabla();
            } else {
                lError.setText("No se pudo agregar");
            }
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModificarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblParametro.getModel();
        pmbo = new SsfParametroBO();
        limpiarMsgs();
        if (tblParametro.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblParametro.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            if (taParametro.getText().trim().equals("")) {
                lError.setText("Nombre Parámetro no puede quedar en blanco");
            } else if (cbTipoEval.getSelectedIndex() == 0) {
                lError.setText("Seleccione un tipo evaluación");
            } else {
                String desc, nom, id, idtipoeval;
                id = model.getValueAt(tblParametro.getSelectedRow(), 0).toString();
                nom = taParametro.getText().trim();
                desc = taDescripcion.getText().trim();
                idtipoeval = mapte.get(cbTipoEval.getSelectedItem()).toString();
                SsfParametro pm = new SsfParametro();
                pm.setId(BigDecimal.valueOf(Long.valueOf(id)));
                pm.setParametro(nom);
                pm.setDescripcion(desc);
                pm.setIdEvaluaciontipo(new SsfEvaluaciontipo(BigDecimal.valueOf((long) Long.valueOf(idtipoeval))));
                if (pmbo.updateSP(pm)) {
                    lExito.setText("Parámetro modificado exitosamente.");
                    model.setValueAt(nom, tblParametro.getSelectedRow(), 1);
                    model.setValueAt(desc, tblParametro.getSelectedRow(), 2);
                } else {
                    lError.setText("No se pudo modificar");
                }
            }
        }
    }//GEN-LAST:event_bModificarActionPerformed

    private void taParametroMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_taParametroMousePressed
        limpiarMsgs();
    }//GEN-LAST:event_taParametroMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MantenedorParametro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MantenedorParametro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MantenedorParametro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MantenedorParametro.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MantenedorParametro().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bModificar;
    private javax.swing.JComboBox<String> cbTipoEval;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lError;
    private javax.swing.JLabel lExito;
    private javax.swing.JTextArea taDescripcion;
    private javax.swing.JTextArea taParametro;
    private javax.swing.JToggleButton tbEstado;
    private javax.swing.JTable tblParametro;
    // End of variables declaration//GEN-END:variables

    private SsfParametroBO pmbo;
    private HashMap<String, Integer> mapte = new HashMap<>();
    private FormsController formsController;
    private int contador = 1;

    public void setFormsController(FormsController formsController) {
        this.formsController = formsController;
    }

    public void cargaEvaluacionTipo() {
        SsfEvaluaciontipoBO etbo = new SsfEvaluaciontipoBO();
        List<SsfEvaluaciontipo> etlist = etbo.getAllSP();
        etlist.forEach((et) -> {
            mapte.put(et.getTipo(), et.getId().intValue());
        });
        etlist.forEach((et) -> {
            cbTipoEval.addItem(et.getTipo());
        });
    }

    private void cargaTabla() {
        
        DefaultTableModel model = (DefaultTableModel) tblParametro.getModel();
        model.setRowCount(0);
        pmbo = new SsfParametroBO();
        List<SsfParametro> lpm = pmbo.getAllSP();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        lpm.forEach((pm) -> {
            model.addRow(new Object[]{pm.getId(), pm.getParametro(), pm.getDescripcion(), pm.getIdEvaluaciontipo().getTipo(), sdf.format(pm.getFechCreacion()), pm.getEstado()});
        });
        tblParametro.setModel(model);

    }

    private void desactivarEstado() {
        tbEstado.setText("Desactivado");
        tbEstado.setBackground(new java.awt.Color(255, 51, 51));
    }

    private void activarEstado() {
        tbEstado.setText("Activo");
        tbEstado.setBackground(new java.awt.Color(0, 204, 102));
    }

    private void limpiarMsgs() {
        lExito.setText("");
        lError.setText("");
    }

    private void resizeTabla() { 
        tblParametro.getColumnModel().getColumn(0).setMaxWidth(40);
        tblParametro.getColumnModel().getColumn(1).setMaxWidth(200);
        tblParametro.getColumnModel().getColumn(2).setMaxWidth(400);
        tblParametro.getColumnModel().getColumn(3).setMaxWidth(120);
        tblParametro.getColumnModel().getColumn(4).setMaxWidth(110);
        tblParametro.getColumnModel().getColumn(5).setMaxWidth(50);
    }
}
