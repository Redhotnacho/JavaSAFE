/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package duoc.cl.safe.presentacion.capacitaciones;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Image;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Rectangle;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import duoc.cl.safe.entity.SsfAlumno;
import duoc.cl.safe.entity.SsfAlumnocapaempresa;
import duoc.cl.safe.entity.SsfCapacitacionempresa;
import duoc.cl.safe.entity.SsfCertificado;
import duoc.cl.safe.herramientas.FormsController;
import duoc.cl.safe.herramientas.Utilidad;
import duoc.cl.safe.negocio.SsfAlumnoBO;
import duoc.cl.safe.negocio.SsfAlumnocapaempresaBO;
import duoc.cl.safe.negocio.SsfCapacitacionempresaBO;
import duoc.cl.safe.negocio.SsfCertificadoBO;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import static java.lang.System.out;
import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.icepdf.ri.common.SwingController;
import org.icepdf.ri.common.SwingViewBuilder;

/**
 *
 * @author Nacho
 */
public class AsignarAlumno extends javax.swing.JFrame {

    /**
     * Creates new form MantenedorCertificado
     */
    public AsignarAlumno() {
        initComponents();
        PropertyConfigurator.configure("log4j.properties");
        resizeTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgAprobacion = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAsignarAlumnos = new javax.swing.JTable();
        lExito = new javax.swing.JLabel();
        lError = new javax.swing.JLabel();
        tbEstado = new javax.swing.JToggleButton();
        bModificar = new javax.swing.JButton();
        bAgregar = new javax.swing.JButton();
        bLimpiar = new javax.swing.JButton();
        cbAlumno = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        bRefrescar = new javax.swing.JButton();
        rSi = new javax.swing.JRadioButton();
        rNo = new javax.swing.JRadioButton();
        rPendiente = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        cbCapEmpresa = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbCertificado = new javax.swing.JComboBox<>();
        bImprCertificado = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tblAsignarAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Alumno", "Capacitación / Empresa", "Certificado", "Aprobación", "Fecha Creación", "Estado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Short.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblAsignarAlumnos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAsignarAlumnosMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblAsignarAlumnos);

        lExito.setForeground(new java.awt.Color(0, 102, 0));

        lError.setForeground(new java.awt.Color(204, 0, 0));

        tbEstado.setText("Activo");
        tbEstado.setEnabled(false);
        tbEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tbEstadoActionPerformed(evt);
            }
        });

        bModificar.setText("Modificar");
        bModificar.setEnabled(false);
        bModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bModificarActionPerformed(evt);
            }
        });

        bAgregar.setText("Agregar");
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });

        bLimpiar.setText("Limpiar");
        bLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLimpiarActionPerformed(evt);
            }
        });

        cbAlumno.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Alumno -" }));

        jLabel3.setText("Alumno:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(102, 0, 102));
        jLabel8.setText("Asignar Alumnos");

        jLabel6.setText("Aprobación:");

        bRefrescar.setText("Refrescar");
        bRefrescar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRefrescarActionPerformed(evt);
            }
        });

        bgAprobacion.add(rSi);
        rSi.setText("Sí");

        bgAprobacion.add(rNo);
        rNo.setText("No");

        bgAprobacion.add(rPendiente);
        rPendiente.setText("Pendiente");

        jLabel4.setText("Capacitación para Empresa:");

        cbCapEmpresa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Capacitación para Empresa-" }));

        jLabel5.setText("Certificado:");

        cbCertificado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "- Seleccione Certificado -" }));

        bImprCertificado.setText("Imprimir");
        bImprCertificado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bImprCertificadoActionPerformed(evt);
            }
        });

        jMenu1.setText("Cargando...");
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel8)
                                        .addGap(575, 575, 575))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(cbCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(bImprCertificado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(18, 18, 18)
                                                .addComponent(bRefrescar, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(rSi)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(rNo)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(rPendiente)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                                                .addComponent(bAgregar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bModificar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(bLimpiar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(tbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(cbCapEmpresa, javax.swing.GroupLayout.Alignment.LEADING, 0, 324, Short.MAX_VALUE)
                                                .addComponent(cbAlumno, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                .addGap(0, 92, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lExito, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(lError, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel8)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbAlumno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCapEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCertificado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(bRefrescar)
                    .addComponent(bImprCertificado))
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bAgregar)
                    .addComponent(bLimpiar)
                    .addComponent(bModificar)
                    .addComponent(tbEstado)
                    .addComponent(jLabel6)
                    .addComponent(rSi)
                    .addComponent(rNo)
                    .addComponent(rPendiente))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lExito, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lError, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened

        //this.setJMenuBar(formsController.getMenu().getMenuBar());
        //formsController.getMenu().setjFrame(this);
        this.setLocationRelativeTo(null);
        cargaTabla();
        cargaAlumno();
        cargaCapemp();
        cargaCertf();
    }//GEN-LAST:event_formWindowOpened

    private void tblAsignarAlumnosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAsignarAlumnosMouseClicked
        limpiarMsgs();
        tbEstado.setEnabled(true);
        bModificar.setEnabled(true);
        DefaultTableModel model = (DefaultTableModel) tblAsignarAlumnos.getModel();
        if (Integer.parseInt(model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 6).toString()) == 1) {
            tbEstado.setSelected(false);
            activarEstado();
        } else {
            tbEstado.setSelected(true);
            desactivarEstado();
        }
        if (model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 1) != null) {
            cbAlumno.setSelectedItem(model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 1).toString());
        } else {
            cbAlumno.setSelectedIndex(0);
        }
        if (model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 2) != null) {
            cbCapEmpresa.setSelectedItem(model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 2).toString());
        } else {
            cbCapEmpresa.setSelectedIndex(0);
        }
        if (model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 3) != null) {
            cbCertificado.setSelectedItem(model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 3).toString());
        } else {
            cbCertificado.setSelectedIndex(0);
        }
        if (model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 4) != null) {
            int aprueba = Integer.parseInt(model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 4).toString());
            if (aprueba == 1) {
                rSi.setSelected(true);
            } else if (aprueba == 0) {
                rNo.setSelected(true);
            } else {
                rPendiente.setSelected(true);
            }
        } else {
            rPendiente.setSelected(true);
        }
    }//GEN-LAST:event_tblAsignarAlumnosMouseClicked

    private void bLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLimpiarActionPerformed
        tbEstado.setEnabled(false);
        bModificar.setEnabled(false);
        limpiarMsgs();
        tblAsignarAlumnos.clearSelection();
        cbAlumno.setSelectedIndex(0);
        cbCapEmpresa.setSelectedIndex(0);
        cbCertificado.setSelectedIndex(0);
    }//GEN-LAST:event_bLimpiarActionPerformed

    private void tbEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tbEstadoActionPerformed
        limpiarMsgs();
        DefaultTableModel model = (DefaultTableModel) tblAsignarAlumnos.getModel();
        acebo = new SsfAlumnocapaempresaBO();

        if (tblAsignarAlumnos.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblAsignarAlumnos.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            int id = Short.parseShort(model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 0).toString());
            if (!tbEstado.isSelected()) {
                if (acebo.activarSP(id)) {
                    activarEstado();
                    model.setValueAt("1", tblAsignarAlumnos.getSelectedRow(), 6);
                }
            } else {
                if (acebo.desactivarSP(id)) {
                    desactivarEstado();
                    model.setValueAt("0", tblAsignarAlumnos.getSelectedRow(), 6);
                }
            }
        }
    }//GEN-LAST:event_tbEstadoActionPerformed

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        acebo = new SsfAlumnocapaempresaBO();
        limpiarMsgs();
        if (cbAlumno.getSelectedIndex() == 0) {
            lError.setText("Seleccione un Alumno");
        } else if (cbCapEmpresa.getSelectedIndex() == 0) {
            lError.setText("Seleccione una capacitación / empresa");
        } else if (cbCertificado.getSelectedIndex() == 0) {
            lError.setText("Seleccione un certificado");
        } else {
            String idalum, idcapemp, idcertf;
            short aprueba = getAprueba();
            idalum = mapa.get(cbAlumno.getSelectedItem()).toString();
            idcapemp = mapce.get(cbCapEmpresa.getSelectedItem()).toString();
            idcertf = mapctf.get(cbCertificado.getSelectedItem()).toString();
            SsfAlumnocapaempresa ace = new SsfAlumnocapaempresa();
            ace.setAprobacion(aprueba);
            ace.setIdAlumno(new SsfAlumno(BigDecimal.valueOf((long) Long.valueOf(idalum))));
            ace.setIdCapaempresa(new SsfCapacitacionempresa(BigDecimal.valueOf((long) Long.valueOf(idcapemp))));
            ace.setIdCertificado(new SsfCertificado(BigDecimal.valueOf((long) Long.valueOf(idcertf))));
            if (acebo.addSP(ace)) {
                lExito.setText("Alumno asignado exitosamente.");
                cargaTabla();
            } else {
                lError.setText("No se pudo agregar");
            }
        }
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bModificarActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblAsignarAlumnos.getModel();
        acebo = new SsfAlumnocapaempresaBO();
        limpiarMsgs();
        if (tblAsignarAlumnos.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblAsignarAlumnos.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            if (cbAlumno.getSelectedIndex() == 0) {
                lError.setText("Seleccione un Alumno");
            } else if (cbCapEmpresa.getSelectedIndex() == 0) {
                lError.setText("Seleccione una capacitación / empresa");
            } else if (cbCertificado.getSelectedIndex() == 0) {
                lError.setText("Seleccione un certificado");
            } else {
                String idalum, idcapemp, idcertf, id;
                short aprueba = getAprueba();
                id = model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 0).toString();
                idalum = mapa.get(cbAlumno.getSelectedItem()).toString();
                idcapemp = mapce.get(cbCapEmpresa.getSelectedItem()).toString();
                idcertf = mapctf.get(cbCertificado.getSelectedItem()).toString();
                SsfAlumnocapaempresa ace = acebo.findSP(Integer.valueOf(id));
                ace.setAprobacion(aprueba);
                ace.setIdAlumno(new SsfAlumno(BigDecimal.valueOf((long) Long.valueOf(idalum))));
                ace.setIdCapaempresa(new SsfCapacitacionempresa(BigDecimal.valueOf((long) Long.valueOf(idcapemp))));
                ace.setIdCertificado(new SsfCertificado(BigDecimal.valueOf((long) Long.valueOf(idcertf))));
                if (acebo.updateSP(ace)) {
                    lExito.setText("Asignación alumno modificada exitosamente.");
                    model.setValueAt(cbAlumno.getSelectedItem(), tblAsignarAlumnos.getSelectedRow(), 1);
                    model.setValueAt(cbCapEmpresa.getSelectedItem(), tblAsignarAlumnos.getSelectedRow(), 2);
                    model.setValueAt(cbCertificado.getSelectedItem(), tblAsignarAlumnos.getSelectedRow(), 3);
                    model.setValueAt(aprueba, tblAsignarAlumnos.getSelectedRow(), 4);
                } else {
                    lError.setText("No se pudo modificar");
                }
            }
        }
    }//GEN-LAST:event_bModificarActionPerformed

    private void bRefrescarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRefrescarActionPerformed
        tbEstado.setEnabled(false);
        bModificar.setEnabled(false);
        limpiarMsgs();
        tblAsignarAlumnos.clearSelection();
        cbAlumno.setSelectedIndex(0);
        cbCapEmpresa.setSelectedIndex(0);
        cbCertificado.setSelectedIndex(0);
        rPendiente.setSelected(true);
        cargaTabla();
    }//GEN-LAST:event_bRefrescarActionPerformed

    private void bImprCertificadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bImprCertificadoActionPerformed

        if (tblAsignarAlumnos.getSelectedRow() == -1) {
            tbEstado.setEnabled(false);
            if (tblAsignarAlumnos.getRowCount() == 0) {
                lError.setText("Tabla vacía");
            } else {
                lError.setText("No hay fila seleccionada");
            }
        } else {
            DefaultTableModel model = (DefaultTableModel) tblAsignarAlumnos.getModel();
            String id = model.getValueAt(tblAsignarAlumnos.getSelectedRow(), 0).toString();
            SsfAlumnocapaempresa ace = findACE(Integer.valueOf(id));
            if (ace.getAprobacion() != 1) {
                lError.setText("Alumno no está aprobado");
            } else {
                try {
                    Document documento = new Document();
                    PdfWriter.getInstance(documento, new FileOutputStream("./certificados/Certificado.pdf"));

                    documento.open();

                    PdfPTable table = new PdfPTable(3);
                    //table.getDefaultCell().setBorder(0);
                    table.setWidthPercentage(100);
                    table.setWidths(new int[]{1, 3, 1});

                    Image imagenc = Image.getInstance("certificados/corner.png");
                    imagenc.setAlignment(Element.ALIGN_LEFT);
                    imagenc.scaleToFit(200, 200);
                    //documento.add(imagenc);

                    Image imagen = Image.getInstance("src/duoc/cl/safe/img/SAFE.png");
                    imagen.setAlignment(Element.ALIGN_RIGHT);
                    imagen.scaleToFit(100, 100);
                    //documento.add(imagen);

                    Paragraph par5 = new Paragraph();
                    Font fontdescrip5 = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL, BaseColor.GREEN.darker());
                    par5.add(new Phrase("SAFE - \n", fontdescrip5));
                    par5.add(new Phrase("Prevención de Riesgos", fontdescrip5));
                    par5.setAlignment(Element.ALIGN_RIGHT);
                    //documento.add(par5);

                    PdfPCell cellOne = new PdfPCell(imagenc);
                    PdfPCell cellTwo = new PdfPCell(new Phrase(""));
                    PdfPCell cellThree = new PdfPCell(imagen);

                    cellOne.setBorder(Rectangle.NO_BORDER);
                    cellTwo.setBorder(Rectangle.NO_BORDER);
                    cellThree.setBorder(Rectangle.NO_BORDER);

                    table.addCell(cellOne);
                    table.addCell(cellTwo);
                    table.addCell(cellThree);
                    cellTwo.setColspan(2);
                    table.addCell(cellTwo);
                    cellThree = new PdfPCell(par5);
                    cellThree.setBorder(Rectangle.NO_BORDER);
                    table.addCell(cellThree);

                    documento.add(table);

                    Paragraph par1 = new Paragraph();
                    Font fontitulo = new Font(Font.FontFamily.HELVETICA, 20, Font.BOLD, BaseColor.BLACK);
                    par1.add(new Phrase(Chunk.NEWLINE));
                    par1.add(new Phrase(Chunk.NEWLINE));
                    par1.add(new Phrase(Chunk.NEWLINE));
                    par1.add(new Phrase(Chunk.NEWLINE));
                    par1.add(new Phrase("CERTIFICADO DE CAPACITACIÓN", fontitulo));
                    par1.setAlignment(Element.ALIGN_CENTER);
                    par1.add(new Phrase(Chunk.NEWLINE));
                    par1.add(new Phrase(Chunk.NEWLINE));
                    documento.add(par1);

                    Paragraph par2 = new Paragraph();
                    Font fontdescrip = new Font(Font.FontFamily.HELVETICA, 14, Font.NORMAL, BaseColor.BLUE);
                    par2.add(new Phrase("Para " + ace.getIdAlumno().getIdPersona().getNombre() + " "
                            + ace.getIdAlumno().getIdPersona().getApPaterno() + " "
                            + ace.getIdAlumno().getIdPersona().getApMaterno(), fontdescrip));
                    par2.setAlignment(Element.ALIGN_CENTER);
                    par2.add(new Phrase(Chunk.NEWLINE));
                    par2.add(new Phrase(Chunk.NEWLINE));
                    documento.add(par2);

                    Paragraph par3 = new Paragraph();
                    Font fontdescrip2 = new Font(Font.FontFamily.COURIER, 10, Font.BOLD, BaseColor.DARK_GRAY);
                    SimpleDateFormat sdf = new SimpleDateFormat("dd");
                    SimpleDateFormat sdf2 = new SimpleDateFormat("MMMMM");
                    SimpleDateFormat sdf3 = new SimpleDateFormat("yyyy");
                    String dia = sdf.format(ace.getIdCapaempresa().getFechaTermino());
                    String mes = sdf2.format(ace.getIdCapaempresa().getFechaTermino());
                    String anio = sdf3.format(ace.getIdCapaempresa().getFechaTermino());
                    par3.add(new Phrase("Completó con éxito el día " + dia + " de " + mes + " de " + anio + ":", fontdescrip2));
                    par3.setAlignment(Element.ALIGN_CENTER);
                    par3.add(new Phrase(Chunk.NEWLINE));
                    par3.add(new Phrase(Chunk.NEWLINE));
                    documento.add(par3);

                    Paragraph par4 = new Paragraph();
                    Font fontdescrip12 = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL, BaseColor.GRAY);
                    par4.add(new Phrase("CAPACITACIÓN " + ace.getIdCapaempresa().getIdCapacitacion().getNombre().toUpperCase(), fontdescrip12));
                    par4.setAlignment(Element.ALIGN_CENTER);
                    par4.add(new Phrase(Chunk.NEWLINE));
                    par4.add(new Phrase(Chunk.NEWLINE));
                    documento.add(par4);

                    Paragraph par41 = new Paragraph();
                    Font fontdescrip13 = new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD, BaseColor.BLACK);
                    par41.add(new Phrase(Chunk.NEWLINE));
                    par41.add(new Phrase(Chunk.NEWLINE));
                    par41.add(new Phrase("Enseñado por:", fontdescrip13));
                    par41.setAlignment(Element.ALIGN_CENTER);
                    documento.add(par41);

                    Image imagen0 = Image.getInstance("certificados/firma.png");
                    imagen0.setAlignment(Element.ALIGN_CENTER);
                    imagen0.scaleToFit(100, 100);
                    documento.add(imagen0);

                    Paragraph par42 = new Paragraph();
                    Font fontdescrip14 = new Font(Font.FontFamily.HELVETICA, 10, Font.BOLD, BaseColor.BLACK);
                    String nomcompleto = ace.getIdCapaempresa().getIdUsuario().getIdPersona().getNombre() + " "
                            + ace.getIdCapaempresa().getIdUsuario().getIdPersona().getApPaterno() + " "
                            + ace.getIdCapaempresa().getIdUsuario().getIdPersona().getApMaterno().substring(0, 1).toUpperCase() + ".";
                    par42.add(new Phrase(nomcompleto, fontdescrip14));
                    par42.setAlignment(Element.ALIGN_CENTER);
                    documento.add(par42);

                    Image imagen01 = Image.getInstance("certificados/certificate.png");
                    imagen01.setAlignment(Element.ALIGN_LEFT);
                    imagen01.scaleToFit(100, 100);
                    documento.add(imagen01);

                    Paragraph par9 = new Paragraph();
                    par9.setAlignment(Element.ALIGN_CENTER);
                    par9.add(new Phrase(Chunk.NEWLINE));
                    par9.add(new Phrase("¡Seguridad por su bienestar!", FontFactory.getFont("Arial", 12, Font.BOLD, BaseColor.GREEN.darker())));
                    par9.add(new Phrase(Chunk.NEWLINE));
                    documento.add(par9);

                    Image imagencb = Image.getInstance("certificados/cornerbot.png");
                    imagencb.setAlignment(Element.ALIGN_RIGHT);
                    imagencb.scaleToFit(200, 200);
                    documento.add(imagencb);

                    documento.close();
                    viewerCtrl();
                    lExito.setText("Certificado Generado");
                } catch (DocumentException e) {
                    log.log(Level.ERROR, "Error al generar PDF", e);
                } catch (FileNotFoundException ex) {
                    log.log(Level.ERROR, "Error al generar PDF", ex);
                } catch (IOException ex) {
                    log.log(Level.ERROR, "Error al generar PDF", ex);
                } catch (Exception ex) {
                    log.log(Level.ERROR, "Error al generar PDF", ex);
                } finally {
                    out.close();
                }
            }
        }
    }//GEN-LAST:event_bImprCertificadoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AsignarAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AsignarAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AsignarAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AsignarAlumno.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AsignarAlumno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bAgregar;
    private javax.swing.JButton bImprCertificado;
    private javax.swing.JButton bLimpiar;
    private javax.swing.JButton bModificar;
    private javax.swing.JButton bRefrescar;
    private javax.swing.ButtonGroup bgAprobacion;
    private javax.swing.JComboBox<String> cbAlumno;
    private javax.swing.JComboBox<String> cbCapEmpresa;
    private javax.swing.JComboBox<String> cbCertificado;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lError;
    private javax.swing.JLabel lExito;
    private javax.swing.JRadioButton rNo;
    private javax.swing.JRadioButton rPendiente;
    private javax.swing.JRadioButton rSi;
    private javax.swing.JToggleButton tbEstado;
    private javax.swing.JTable tblAsignarAlumnos;
    // End of variables declaration//GEN-END:variables

    private SsfAlumnocapaempresaBO acebo;
    private List<SsfAlumnocapaempresa> lace;
    private HashMap<String, Integer> mapa = new HashMap<>();
    private HashMap<String, Integer> mapce = new HashMap<>();
    private HashMap<String, Integer> mapctf = new HashMap<>();
    private static Logger log = Logger.getLogger(AsignarAlumno.class.getName());
    private FormsController formsController;

    public void cargaAlumno() {
        SsfAlumnoBO abo = new SsfAlumnoBO();
        List<SsfAlumno> alist = abo.getAllSP();
        alist.forEach((a) -> {
            mapa.put("Rut: " + Utilidad.formatRutSalida(a.getIdPersona().getRut()) +" - "+ a.getIdPersona().getNombre()
                    + " " + a.getIdPersona().getApPaterno(), a.getId().intValue());
        });
        alist.forEach((a) -> {
            cbAlumno.addItem("Rut: " + Utilidad.formatRutSalida(a.getIdPersona().getRut()) +" - "+ a.getIdPersona().getNombre()
                    + " " + a.getIdPersona().getApPaterno());
        });
    }

    public void cargaCapemp() {
        SsfCapacitacionempresaBO cebo = new SsfCapacitacionempresaBO();
        List<SsfCapacitacionempresa> celist = cebo.getAllSP();
        celist.forEach((c) -> {
            mapce.put(c.getIdCapacitacion().getNombre() + " / " + c.getIdEmpresa().getNombre(), c.getId().intValue());
        });
        celist.forEach((c) -> {
            cbCapEmpresa.addItem(c.getIdCapacitacion().getNombre() + " / " + c.getIdEmpresa().getNombre());
        });
    }

    public void cargaCertf() {
        SsfCertificadoBO cbo = new SsfCertificadoBO();
        List<SsfCertificado> clist = cbo.getAllSP();
        clist.forEach((c) -> {
            mapctf.put(c.getContenido(), c.getId().intValue());
        });
        clist.forEach((c) -> {
            cbCertificado.addItem(c.getContenido());
        });
    }

    private void cargaTabla() {
        DefaultTableModel model = (DefaultTableModel) tblAsignarAlumnos.getModel();
        model.setRowCount(0);
        acebo = new SsfAlumnocapaempresaBO();
        lace = acebo.getAllSP();
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
        for (SsfAlumnocapaempresa c : lace) {
            model.addRow(new Object[]{c.getId(), "Rut: " + Utilidad.formatRutSalida(c.getIdAlumno().getIdPersona().getRut())
                +" - "+ c.getIdAlumno().getIdPersona().getNombre() + " " + c.getIdAlumno().getIdPersona().getApPaterno(),
                c.getIdCapaempresa().getIdCapacitacion().getNombre() + " / " + c.getIdCapaempresa().getIdEmpresa().getNombre(),
                c.getIdCertificado().getContenido(), c.getAprobacion(), sdf.format(c.getFechCreacion()), c.getEstado()});
        }
    }

    private void desactivarEstado() {
        tbEstado.setText("Desactivado");
        tbEstado.setBackground(new java.awt.Color(255, 51, 51));
    }

    private void activarEstado() {
        tbEstado.setText("Activo");
        tbEstado.setBackground(new java.awt.Color(0, 204, 102));
    }

    private void limpiarMsgs() {
        lExito.setText("");
        lError.setText("");
    }

    public void setFormsController(FormsController formsController) {
        this.formsController = formsController;
    }

    private void resizeTabla() {
        tblAsignarAlumnos.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tblAsignarAlumnos.getColumnModel().getColumn(0).setMaxWidth(40);
        tblAsignarAlumnos.getColumnModel().getColumn(1).setMaxWidth(220);
        tblAsignarAlumnos.getColumnModel().getColumn(2).setMaxWidth(200);
        tblAsignarAlumnos.getColumnModel().getColumn(3).setMaxWidth(150);
        tblAsignarAlumnos.getColumnModel().getColumn(4).setMaxWidth(80);
        tblAsignarAlumnos.getColumnModel().getColumn(5).setMaxWidth(80);
        tblAsignarAlumnos.getColumnModel().getColumn(6).setMaxWidth(50);
    }

    private short getAprueba() {
        if (rSi.isSelected()) {
            return 1;
        } else if (rNo.isSelected()) {
            return 0;
        }
        return -1;
    }

    public void viewerCtrl() {
        String filePath = "./certificados/Certificado.pdf";
        SwingController controller = new SwingController();
        SwingViewBuilder factory = new SwingViewBuilder(controller);
        JPanel viewerComponentPanel = factory.buildViewerPanel();
        controller.getDocumentViewController().setAnnotationCallback(
                new org.icepdf.ri.common.MyAnnotationCallback(
                        controller.getDocumentViewController()));
        JFrame applicationFrame = new JFrame();
        applicationFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        applicationFrame.add(viewerComponentPanel);
        controller.openDocument(filePath);
        applicationFrame.pack();
        applicationFrame.setVisible(true);
    }

    private SsfAlumnocapaempresa findACE(Integer id) {
        if (lace == null) {
            lace = new SsfAlumnocapaempresaBO().getAllSP();
        }
        for (SsfAlumnocapaempresa ace : lace) {
            if (ace.getId().intValue()== id) {
                return ace;
            }
        }
        return null;
    }

}
